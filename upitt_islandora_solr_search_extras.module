<?php

/**
 * @file
 * Primary hook implementations.
 */

// Permissions.
define('UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE', 'manage upitt solr search');

// constant
define('CST_ISLANDORA_PATH', drupal_get_path('module', 'islandora'));
define('CST_SESSION_LIFETIME', 60 * 10);

/**
 * Implements hook_menu().
 */
function upitt_islandora_solr_search_extras_menu() {
  $items = array(
    'islandora/object/%islandora_object/searching_collection' => array(
      'title' => 'Search within Collection',
      'description' => 'Search the models within this Collection.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_solr_search_extras_search_specific', 2),
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    'admin/islandora/tools/upitt_islandora_solr_search_extras' => array(
      'title' => 'SOLR Search Extras Settings',
      'description' => 'Configure the various SOLR Search Extras options.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_solr_search_extras_admin_settings'),
      'access arguments' => array(UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE),
      'file' => 'includes/admin.form.inc',
    ),
    // solr search sessions handling
    'islandora/object/%islandora_object/from_search/%' => array(
      'title callback' => 'upitt_islandora_solr_search_extras__islandora_drupal_title',
      'title arguments' => array(2),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_solr_search_extras__islandora_view_object', 2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'upitt_islandora_solr_search_extras__islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function upitt_islandora_init() {
  $path = drupal_get_path('module', 'upitt_islandora_solr_search_extras');
  drupal_add_css("$path/css/solr_search_extras.css");
}

/**
 * Implements hook_theme().
 */
function upitt_islandora_solr_search_extras_theme() {
  return array(
    // to remove duplicate pager and display_links
    'islandora_objects_subset' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-objects-subset',
      'variables' => array(
        'objects' => NULL,
        'display' => 'grid',
        'limit' => 10,
        'total' => NULL,
        'pager_element' => 0,
      ),
    ),
    // to display collection search box
    'islandora_basic_collection' => array(
      'template' => 'theme/islandora-basic-collection',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL),
    ),
/*    'islandora_basic_collection_grid' => array(
      'template' => 'theme/islandora-basic-collection-grid',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL),
    ),*/
    // to replace output of grid with solr_search
    'islandora_objects_grid' => array(
      'template' => 'theme/islandora-objects-grid',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL, 'objects' => NULL),
    ),
    // to replace output with solr_search
    'islandora_objects_list' => array(
      'template' => 'theme/islandora-objects-list',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL, 'objects' => NULL),
    ),
    'islandora_objects' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-objects',
      'variables' => array(
        'objects' => NULL,
        'display' => NULL,
        'page_size' => 20,
        'limit' => 12,
      ),
    ),
    // to display the solr search results for islandora/search and collection/[fedora-label]
    'islandora_solr_extras' => array(
      'template' => 'theme/islandora-solr-extras',
      'variables' => array(
        'results' => NULL,
        'elements' => array(),
        'pids' => array(),
      ),
    ),
    // solr search sessions handling
    'islandora_default' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-object',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

function upitt_islandora_solr_search_extras_search_specific($form, &$form_state, AbstractObject $object) {
  // The searchterms is a POST value
  $search_term = isset($_POST['searchterm']) ? $_POST['searchterm'] : '';
  $search_field = isset($_POST['field']) ? $_POST['field'] : '';
  if ($search_term) {
    if ($search_field) {
      $solr_query = format_string('(!field:!value OR !field2:!value OR !field3:!value) AND (!search_field:*!search_term*)',
        array('!field' => 'RELS_EXT_isMemberOfCollection_uri_ms',
              '!field2' => 'RELS_EXT_isPageOf_uri_ms',
              '!field3' => 'RELS_EXT_isMemberOf_uri_ms',
              '!value' => Apache_Solr_Service::escape('info:fedora/' . $object),
              '!search_field' => $search_field,
              '!search_term' => $search_term
          )
        );
    }
    else {
      // need to get the solr system's setting for this!
      $solr_query = format_string('(!field:!value OR !field2:!value OR !field3:!value) AND (catch_all_fields_mt:*!search_term* OR dc.title:*!search_term* OR dc.subject:*!search_term* OR mods_abstract_mt:*!search_term* OR mods_originInfo_dateOther_ms:*!search_term*)',
        array('!field' => 'RELS_EXT_isMemberOfCollection_uri_ms',
              '!field2' => 'RELS_EXT_isPageOf_uri_ms',
              '!field3' => 'RELS_EXT_isMemberOf_uri_ms',
              '!value' => Apache_Solr_Service::escape('info:fedora/' . $object),
              '!search_term' => $search_term
          )
        );
    }
  }
  else {
    $solr_query = format_string('!field:!value', array(
                '!field' => 'RELS_EXT_isMemberOfCollection_uri_ms',
                '!value' => Apache_Solr_Service::escape('info:fedora/' . $object),
        ));
  }
  $options = array('query' => array('type' => 'dismax',
      'f' => array($solr_query)));
  drupal_goto('islandora/search', $options);
}

/**
 * This responds to the module_invoke_all().
 *
 * The call from within the islandora_solr module's
 * "islandora_solr_printResults" function will be handled here.
 * The functionality here is to display as normal for all objects that
 * already have MODS info, but to load the MODS from parent objects for
 * objects that have a value in RELS_EXT_isMemberOfCollection_uri_ms.
 *
 * @param array $solr_results
 *   Array containing the Solr results which are altered trough the query
 *   processor.
 *
 * @return markup
 *   Returns the themed solr search results.
 */
function upitt_islandora_solr_search_extras_islandora_solr_printResults($solr_results) {
  // The skey value will need to be written into the links for pages as handled by
  // /islandora/object/%islandora_object/from_search/% menu route above.
  $skey = _get_skey($solr_results);
  $solr_fields = _get_solr_search_fields();
  $tmp_title = '';
  $solr_results = islandora_solr_prepare_solr_results($solr_results);
  $object_results = $solr_results['response']['objects'];
  $object_results = islandora_solr_prepare_solr_doc($object_results);
  $elements = array();
  $elements['solr_total'] = $solr_results['response']['numFound'];
  $elements['solr_start'] = $solr_results['response']['start'];
  foreach ($object_results as $k=>$solr_result_object) {
    $object_results[$k]['solr_doc']['dc.title']['value'] = _inject_skey_to_markup($object_results[$k]['solr_doc']['dc.title']['value'], $object_results[$k]['PID'], $skey);
    $object_results[$k]['object_url'] = _inject_skey($object_results[$k]['object_url'], $object_results[$k]['PID'], $skey);
    if ((isset($object_results[$k]['datastreams']))) {
      $object_results[$k]['page_solr_doc'] = array();
      $object_results[$k]['thumbnail'] = $object_results[$k]['page_thumbnail'] = '';

      $path = url($object_results[$k]['thumbnail_url'], array('query' => $object_results[$k]['thumbnail_url_params']));
      if ($path <> '/') {
        $image = theme('image', array('path' => $path));

        $options = array('html' => TRUE);
        if (isset($object_results[$k]['object_label'])) {
          $options['attributes']['title'] = $object_results[$k]['object_label'];
        }
        if (isset($object_results[$k]['object_url_params'])) {
          $options['query'] = $object_results[$k]['object_url_params'];
        }
        if (isset($object_results[$k]['object_url_fragment'])) {
          $options['fragment'] = $object_results[$k]['object_url_fragment'];
        }
        // The link may be preferred to take the user to the page result.
        $fragment = (isset($object_results[$k]['object_url_fragment']) && $object_results[$k]['object_url_fragment'] <> '') ? '#' . $object_results[$k]['object_url_fragment'] : '';
        $object_results[$k]['thumbnail'] = l($image, $object_results[$k]['object_url'], $options);
      }
      else {
        $object_results[$k]['thumbnail'] = $object_results[$k]['page_thumbnail'];
        $object_results[$k]['page_thumbnail'] = '';
      }

      if (variable_get('upitt_islandora_solr_search_extras_showparent_searchresults') && (array_search('MODS', $object_results[$k]['datastreams']) === FALSE)) {
        if (((!(isset($object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']))) ||
             (!(isset($object_results[$k]['solr_doc']['RELS_EXT_isPageOf_uri_ms']))) ||
             (!(isset($object_results[$k]['solr_doc']['RELS_EXT_isMemberOf_uri_ms'])))) &&
            (isset($object_results[$k]['object_url']))) {
          $solr_doc = _islandora_solr_pid_parent_search($object_results[$k], $solr_fields, $options, $skey, '');
          if (is_array($solr_doc)) {
            // Keep the existing title value for later.
            if (isset($object_results[$k]['dc.title'])) {
              $tmp_title = $object_results[$k]['dc.title']['value'];
            }
            $page = $object_results[$k];
            $object_results[$k]['solr_doc'] = $solr_doc;
            $object_results[$k]['page_solr_doc'] = $page['solr_doc'];
   // Perhaps the child object thumbnail will be needed to display in the islandora-solr-extras.tpl.php.
   /*
            if (isset($page['datastreams']) && array_search('TN', $page['datastreams'])) {
              $options = array('html' => TRUE);
              if (isset($page['object_label'])) {
                $options['attributes']['title'] = $page['object_label'];
              }
              if (isset($page['object_url_params'])) {
                $options['query'] = $page['object_url_params'];
              }
              if (isset($page['object_url_fragment'])) {
                $options['fragment'] = $page['object_url_fragment'];
              }
              $page_image = theme('image', array(
                'path' => url("islandora/object/{$page['PID']}/datastream/TN/view"),
                'attributes' => array(),
                'width' => '60px',
              ));
              $object_results[$k]['page_thumbnail'] = l($page_image, _inject_skey($page['object_url'], '', $skey), $options);
            }
    */
            if ($tmp_title) {
              $object_results[$k]['solr_doc']['dc.title']['value'] = $tmp_title .
                ' in ' . l($solr_doc['solr_doc']['dc.title']['value'], _inject_skey($solr_doc['object_url'], $solr_doc['PID'], $skey));
            }
          }
        }
      }
      if (($object_results[$k]['solr_doc']['dc.title']['value']) == '') {
        $object_results[$k]['solr_doc']['dc.title']['value'] = $page['object_label'];
      }
      if ((stristr($object_results[$k]['content_models'][0], 'pageCModel') == 'pageCModel') &&
        (substr($object_results[$k]['object_label'], 0, 5) == 'Page ')) {
        // Get the page # value from the object_label - and create a new item that will be
        // rendered as the page number.
        @list($keep, $junk) = explode(", ", $object_results[$k]['object_label']);
        $page_number = str_replace("Page ", "", $keep);
        if (is_numeric($page_number)) {
          $object_results[$k]['solr_doc']['page_number'] = array('value' => 'Page: ' . $page_number, 'label' => 'Page #', 'class' => '' );
        }
      }
    }
  }
  // Return themed search results.
  return theme('islandora_solr_extras', array('results' => $object_results, 'elements' => $elements));
}

function _get_skey($solr_results) {
  $lastmod_limit = time() - CST_SESSION_LIFETIME;
  db_query('DELETE FROM {solr_search_skey_results} WHERE skey IN (SELECT skey FROM {solr_search_sessions} WHERE lastmod < :lastmod_limit)', array(':lastmod_limit' => $lastmod_limit));
  db_query('DELETE FROM {solr_search_sessions WHERE lastmod < :lastmod_limit', array(':lastmod_limit' => $lastmod_limit));
  if (!isset($solr_results['responseHeader']['params'])) {
    return '';
  }
  $skey = NULL;
  // The skey could come from refer_url if user clicked Return to Search Results.
  if (isset($_SERVER['HTTP_REFERER']) && (strstr($_SERVER['HTTP_REFERER'], '/from_search/') <> '')) {
    $parts = explode("/", $_SERVER['HTTP_REFERER']);
    // parts 0=http, 1= 2=[domain] 3=islandora 4=objec 5={PID} 6=from_search 7={skey}
    if ($parts[6] == 'from_search') {
      $skey = $parts[7];
    }
  }
  if (!$skey) {
    $request_uri = urldecode(str_replace('/islandora/search/', '', $_SERVER['REQUEST_URI']));
    @list($request_uri, $junk) = explode('?', $request_uri);
    $solr_filters = $used_filters = array();
    $indexer = 0;
    foreach ($solr_results['responseHeader']['params']['fq'] as $k=>$filter) {
      if (array_search($filter, $used_filters) === FALSE) {
        $solr_filters[] = 'f[' . $indexer . ']=' . $filter;
        $used_filters[] = $filter;
        $indexer++;
      }
    }
    if ($request_uri && $request_uri <> '/islandora/search') {
      $solr_filters[] = 'f[' . $indexer . ']=' . $request_uri;
    }

    $solr_url = '/islandora/search/?islandora_solr_search_navigation=0&' . implode('&', $solr_filters);
    $skey = db_query('SELECT s.skey FROM {solr_search_sessions} s JOIN {solr_search_skey_results} r ON (r.skey = s.skey) WHERE s.solr_search_url = :u', array(':u' => $solr_url))->fetchField();
    $results_per_page = variable_get('islandora_solr_num_of_results', 20);
    if (!$skey) {
      $skey = md5(date('c'));
      _save_solr_search_session($skey, $solr_results, '', 0, $results_per_page);
    } else {
      $offset = (isset($_GET['page'])) ? $_GET['page'] * $results_per_page : 0;
      _save_solr_search_session($skey, NULL, $solr_url, $offset, $results_per_page);
    }
  }
  $lastmod = time();
  db_query('UPDATE {solr_search_sessions} SET `lastmod` = :lastmod WHERE skey = :skey', array('skey' => $skey, 'lastmod' => $lastmod));

  return $skey;
}

function _inject_skey_to_markup($markup, $PID, $skey) {
  // Since these solr results are also rendered on a collection page, only inject if result is for the search page!
  if ((!$skey) || (strstr($_SERVER['REQUEST_URI'], 'collection/') <> '')) {
    return $markup;
  }
  preg_match('/^<a.*?href=(["\'])(.*?)\1.*$/', $markup, $m);
  return str_replace(array('/islandora/object/' . urlencode($PID) . '/from_search/', $m[2]),
                     array('', '/islandora/object/' . urlencode($PID) . '/from_search/' . $skey), $markup);
}

function _inject_skey($url, $PID, $skey) {
  // Since these solr results are also rendered on a collection page, only inject if result is for the search page!
  if ((!$skey) || (strstr($_SERVER['REQUEST_URI'], 'collection/') <> '')) {
    return $url;
  }
  if (!$url) {
    return '/islandora/object/' . urlencode($PID) . '/from_search/' . $skey;
  }
  @list($pre, $post) = explode("#", $url);
  return $pre . '/from_search/' . $skey . $post;
}

/**
 * Helper function to run the equivalent SOLR search to bring back ALL result PID values and store
 * this value set along with the original search URL for to "Return to search results".
 *
 * NOTE:  For speed, etc., this result set is limited to 1000 results.
 *
 * NOTE:  If any of the sub-objects fails to allow a SOLR query to run or the result record
 *   cannot be created for any other reason, the value of $skey is set to an empty string which
 *   will cause the /from_search/{skey} URL modifications to not happen.
 */
function _save_solr_search_session(&$skey, $solr_results, $solr_url = '', $offset, $howmany) {
  $append = ($solr_url <> '');
  if (!isset($solr_results['responseHeader']['params']) && ($solr_url == '')) {
    $skey = '';
    return;
  }
  if ($solr_url) {
    $tmp = str_replace("/islandora/search/?islandora_solr_search_navigation=0&", "", $solr_url);
    $filters = explode("&", $tmp);
    foreach ($filters as $filter) {
      @list($keyname, $param) = explode("=", $filter);
      $q_arr[] = $param;
    }
    $q = ((count($q_arr) > 0) ? '(' : '') . implode(') AND (', $q_arr) . ((count($q_arr) > 0) ? ')' : '');
  }
  else {
    $request_uri = urldecode(str_replace('/islandora/search/', '', $_SERVER['REQUEST_URI']));
    @list($request_uri, $junk) = explode('?', $request_uri);
    $used_filters = $q_arr = $solr_filters = array();
    $filter_index = 0;
    foreach ($solr_results['responseHeader']['params']['fq'] as $k=>$filter) {
      if (array_search($filter, $used_filters) === FALSE) {
        $solr_filters[] = 'f[' . $filter_index . ']=' . $filter;
        $q_arr[] = $filter;
        $filter_index++;
        $used_filters[] = $filter;
      }
    }
    if ($request_uri && $request_uri <> '/islandora/search') {
      $solr_filters[] = 'f[' . $filter_index . ']=' . $request_uri;
      $q_arr[] = $request_uri;
    }
    $solr_url = '/islandora/search/?islandora_solr_search_navigation=0&' . implode('&', $solr_filters);
    $q = ((count($q_arr) > 0) ? '(' : '') . implode(') AND (', $q_arr) . ((count($q_arr) > 0) ? ')' : '');
  }
  $solr_base_filter = trim(variable_get('islandora_solr_base_filter'));
  $fl = 'PID,fgs_label_s';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = $q;
  // Calculate the offset by the current page of search results by looking for
  // a page _GET parameter
  $results_per_page = variable_get('islandora_solr_num_of_results', 20);
  $page = (isset($_GET['page'])) ? $_GET['page'] : round((1 + $by_page) / $results_per_page);
  $query_processor->solrStart = $offset; //$page * $results_per_page;
  $query_processor->solrLimit = $howmany; //results_per_page;
  $query_processor->solrParams = array(
    'fl' => $fl,
    'fq' => '',
  );
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET'); 
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    $results = array();
    $numFound = $tmp['response']['numFound'];
    $solr_fields = array(
        'PID' => array('label' => 'PID', 'class' => 'PID'), 
        'fgs_label_s' => array('label' => 'fgs_label_s', 'class' => 'fgs_label_s')
      ); //   _get_solr_search_fields();
    if ($tmp['response']['numFound'] > 0) {
      foreach ($tmp['response']['docs'] as $k=>$rec) {
        if (variable_get('upitt_islandora_solr_search_extras_showparent_searchresults')) {
          $islandora_object = islandora_object_load($rec['PID']);
          // inspect this object to see if it has no MODS info
          if ($islandora_object && !isset($islandora_object['MODS'])) {
            $tmp_solr_doc = _islandora_solr_pid_parent_search(NULL, $solr_fields, array(), $skey, $rec['PID']);
            $rec['PID'] = isset($tmp_solr_doc['PID']['value']) ? $tmp_solr_doc['PID']['value'] : $rec['PID'];
            $rec['fgs_label_s'] = isset($tmp_solr_doc['fgs_label_s']['value']) ? $tmp_solr_doc['fgs_label_s']['value'] : $rec['fgs_label_s'];
          }
        }
        $results[] = $rec['PID'] . '|' . str_replace("/", "", $rec['fgs_label_s']);
      }

      $lastmod = time();
      if (!$append) {
        db_insert('solr_search_sessions')->fields(array(
          'skey' => $skey,
          'solr_search_url' => $solr_url,
          'numResults' => $numFound,
          'lastmod' => $lastmod,
          // 'results' => implode("/", $results)
          ))->execute();
      }

      $this_offset = $offset;
      foreach ($results as $result) {
        @list($result_pid, $result_title) = explode("|", $result);
        db_query('DELETE FROM {solr_search_skey_results} WHERE skey = :skey AND PID = :PID AND offset = :offset', 
          array(':skey' => $skey, ':PID' => $result_pid, ':offset' => $this_offset));
        db_insert('solr_search_skey_results')->fields(array(
          'skey' => $skey,
          'PID' => $result_pid,
          'offset' => $this_offset,
          'title' => strlen($result_title) > 97 ? substr($result_title, 0, 97) . '...' : $result_title,
        ))->execute();
        $this_offset++;
      }
    }
    else {
      $skey = '';
    }
  }
  catch (Exception $e) {
    error_log('EXCEPTION in _save_solr_search_session : called from ' . $_SERVER['SERVER_NAME'] .
' - ' . $_SERVER['REQUEST_URI'] . '
' . print_r($e, true));
    $skey = '';
  }
  return;
}

/**
 * Helper function to lookup the parent object based on a PID value.
 */
function _islandora_solr_pid_parent_search($child_object, $solr_fields, $options, $skey, $lookup_pid = '') {
  $child_pid = ($lookup_pid) ? $lookup_pid : $child_object['PID'];
  $solr_fields_csv = implode(",", array_keys($solr_fields));
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $islandora_object = islandora_object_load($child_pid);
  $parent = $islandora_object->getParents();
  $page_parents = $islandora_object->relationships->get(NULL, 'isPageOf');
  $page_parent_ids = array();
  foreach ($page_parents as $page_parent) {
    $page_parent_ids[] = $page_parent['object']['value'];
  }
  $parent = array_merge($parent, $page_parent_ids);
  // Get the first value if there happens to be more than one Parent.
  $pid = str_replace(array("islandora/object/", "/", ":"), array("", "\/", "\:"), array_pop($parent));
  if ($pid) {
    // Build and execute Apache Solr query.
    module_load_include('inc', 'islandora_solr', 'includes/utilities');
    $query_processor = new IslandoraSolrQueryProcessor();
    $query_processor->solrQuery = 'PID:'.$pid;
    $query_processor->solrStart = 0;
    $query_processor->solrLimit = 1;
    $query_processor->solrParams = array(
      'fl' => $solr_fields_csv,
      'fq' => variable_get('islandora_solr_base_filter', ''),
    );
    $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
    $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
    $solr->setCreateDocuments(FALSE);
    try {
      $results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
      $tmp = json_decode($results->getRawResponse(), TRUE);
      $added_fields = $results = array();
      foreach ($solr_fields as $key => $solr_field) {
        $found = false;
        foreach ($tmp['response']['docs'] as $match_result) {
          if (array_key_exists($key, $match_result)) {
            $found = (is_array($match_result[$key])) ? $match_result[$key][0] : $match_result[$key];
          }
        }
        if ($found) {
          $added_fields[] = $key;
          $results[$key] = array('label' => $solr_fields[$key]['label'],
                                 'class' => $solr_fields[$key]['class'],
                                 'value' => $found);
        }
      }
      foreach ($tmp['response']['docs'] as $trip) {
        $keys = array_keys($trip);
        foreach ($keys as $key) {
          if (!array_search($key, $added_fields)) {
            $value = is_array($trip[$key]) ? $trip[$key][0] : $trip[$key];
            $results[$key] = array('label' => $solr_fields[$key]['label'],
                                   'class' => $solr_fields[$key]['class'],
                                   'value' => $value);
          }
        }
      }
      if (isset($results['dc.title']['value']) && $child_object) {
        $results['dc.title']['value'] = l($results['dc.title']['value'], $child_object['object_url'], $options);
      }
      return $results;
    }
    catch (Exception $e) {
      error_log('EXCEPTION in _islandora_solr_pid_parent_search : called from ' . $_SERVER['SERVER_NAME'] .
' - ' . $_SERVER['REQUEST_URI'] . '
' . print_r($e, true));
      return array();
    }
  }
}

/**
 * Implements hook_permission().
 */
function upitt_islandora_solr_search_extras_permission() {
  return array(
    UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE => array(
      'title' => t('Manage solr extras'),
      'description' => t('Manage solr extras.'),
    ),
  );
}

function _get_solr_search_fields() {
  $results = db_query("SELECT `solr_field`, `solr_field_settings` FROM islandora_solr_fields WHERE field_type = 'result_fields' ORDER BY `weight`");
  $fields = array();
  foreach ($results as $row) {
    $settings = unserialize($row->solr_field_settings);
    $fields[$row->solr_field] = array('label' => $settings['label'],
                                      'class' => $row->solr_field);
  }
  return $fields;
}

function upitt_islandora_solr_search_extras_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'search_in_collection' && isset($form['islandora_object_id']) && $form['islandora_object_id']['#value'] <> '') {
    $form['#action'] = '/islandora/object/' . $form['islandora_object_id']['#value'] . '/searching_collection' ;
  }
}

function search_in_collection(array $form, array &$form_state, $id, $objLabel) {
  $path = drupal_get_path('module', 'upitt_islandora_solr_search_extras');
  drupal_add_css("$path/css/solr_search_extras.css");
  $form = array(
    'options' => array(
      '#type' => 'fieldset',
      '#title' => t('Search within "' . $objLabel . '"'),
      '#attributes' => array('class' => array('container-inline')),
      'searchterm' => array(
        '#type' => 'textfield',
        '#value' => '',
        '#defaultvalue' => '',
        '#size' => 40,
      ),
      'field' => array(
        '#title' => t('Field'),
        '#type' => 'select',
        '#default_value' => isset($form_state['values']['field']) ? $form_state['values']['field'] : 'dc.title',
        '#options' => islandora_solr_get_fields('search_fields'),
      ),
    ),
    'islandora_object_id' => array(
      '#type' => 'hidden',
      '#value' => $id,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Search within Collection'),
    ),
  );
  return $form;
}

// solr search sessions handling
/**
 * Implements hook_preprocess_theme().
 *
 * This code will remove the sidebar and must check to see whether or not the path is on a user page.
 */
function upitt_islandora_solr_search_extras_preprocess_page(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    if (($item['map'][0] == 'user') || ($item['path'] == 'islandora/object/%/from_search/%') || 
      ($item['path'] == 'islandora/object/%') || ($item['path'] == 'islandora/object/%/datastream/%/htmledit') ||
      ($item['path'] == 'islandora/object/%/viewer')) {
      // remove sidebar for /user page in case it is there
      $vars['page']['sidebar'] = array();
    }
    if ($item['path'] == 'islandora/search' || $item['path'] == 'islandora/search/%') {
      $path = drupal_get_path('module', 'upitt_islandora_solr_search_extras');
      drupal_add_css("$path/css/solr_search_extras.css");
    }
  }
  // if the second menu path is an islandora_object then get the links for Previous, Next, and Restun to Solr Search
  $islandora_object = menu_get_object('islandora_object', 2);
  if (($islandora_object) && ($item['path'] == 'islandora/object/%/from_search/%')) {
//    if (isset($_SERVER['HTTP_REFERER']) && (strstr($_SERVER['HTTP_REFERER'], '/from_search/') <> '')) {
      $vars['solr_search_links'] = _gen_solr_search_links($islandora_object->id);
//    }
    if (function_exists('islandora_retrieve_metadata_markup')) {
      $vars['collection_metadata'] = islandora_retrieve_metadata_markup($islandora_object);
    }
  }
}

/**
 * Helper function to get the PIDS/Titles for a given skey value.  Returns the total number of results.
 */
function _get_pids_and_titles($skey, &$pids, &$titles, &$solr_search_url) {
  $pids = $titles = array();
  $rows = db_query('SELECT r.offset, r.PID, r.title, s.solr_search_url, s.numResults ' .
                   'FROM {solr_search_sessions} s ' .
                   'JOIN {solr_search_skey_results} r ON (r.skey = s.skey) ' .
                   'WHERE s.skey = :s ORDER BY r.offset', array(':s' => $skey))->fetchAllAssoc('PID');

  foreach ($rows as $row) {
    $pid = $row->PID;
    $title = $row->title;
    //    $pid = trim($pid);  $title = trim($title);
    if ($pid && $title) {
      $pids[$row->offset] = $pid;
      $titles[$row->offset] = $title;
    }
  } 
  $solr_search_url = $row->solr_search_url;
  return $row->numResults;
}

/**
 * This returns array of links for a page that came from refer: solr search results.
 */
function _gen_solr_search_links($pid) {
  $cur_url = $_SERVER['REQUEST_URI'];
  $parts = explode("/", $cur_url);
  if (count($parts) < 5) {
    return '';
  }
  elseif ($parts[4] == 'from_search') {
    $skey = $parts[5];
    $pids = $titles = array();
    $solr_search_url = '';
    $numResults = _get_pids_and_titles($skey, $pids, $titles, $solr_search_url);
    $this_idx = array_search($pid, $pids);
    if (count($pids) < $numResults && 
      ($this_idx % variable_get('islandora_solr_num_of_results', 20) == (variable_get('islandora_solr_num_of_results', 20) - 1) )) {
      // Go get one more results now
      _save_solr_search_session($skey, NULL, $solr_search_url, $this_idx, 3);
      $numResults = _get_pids_and_titles($skey, $pids, $titles, $solr_search_url);
      $this_idx = array_search($pid, $pids);
    }

    if (count($pids) > 0) {
      $links = array();
      if ($this_idx > 0 && !($this_idx === FALSE)) {
        $links[] = l('‹ Previous', 
          _inject_skey('', $pids[$this_idx - 1], $skey),
          array(
            'attributes' => array(
            'title' => $titles[$this_idx - 1],
            )
          )
        );
      }
      // The link function messes up the query by reencoding the parts that are already encoded.
      $links[] = '<a href="' . str_replace('"', '%22', $solr_search_url) . '">Back to Search Results</a>';
      if ($this_idx < count($pids) && !($this_idx === FALSE)) {
        $links[] = l('Next ›', 
          _inject_skey('', $pids[$this_idx + 1], $skey),
          array(
            'attributes' => array(
            'title' => $titles[$this_idx + 1],
            )
          )
        );
      }
      return $links;
    }
  }
}

function upitt_islandora_solr_search_extras_preprocess_islandora_object(&$vars) {
  $islandora_object = menu_get_object('islandora_object', 2);
  if ($islandora_object) {
    $vars['solr_search_links'] = array(l('Previous', '#'), l('Next', '#'), l('Return to Search Results', '#'));
  }
}

// solr search sessions handling
function upitt_islandora_solr_search_extras__islandora_view_object($form, &$form_state, AbstractObject $object, $from_search = '') {
  return islandora_view_object($object);
}

// solr search sessions handling
function upitt_islandora_solr_search_extras__islandora_drupal_title(AbstractObject $object) {
  return islandora_drupal_title($object);
}

// solr search sessions handling
function upitt_islandora_solr_search_extras__islandora_object_access_callback($perm, $object = NULL) {
  return islandora_object_access_callback($perm, $object);
}


